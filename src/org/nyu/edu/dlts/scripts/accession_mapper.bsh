/**
Demo Beanshell script to demonstrate importing 
Accession data from excel spreadsheet into an Archives Space Instance

It is executed within the data migration tool

@author Nathan Stevens
@version 1.0 04/10/2014

Specify the mapping functionality the script provides. change # to @ to 
specify that a certain record type is supported

#location
#subject
#name
@accession
#digitalobject
#resource
*/

// import Java classes we need
import org.json.*;
import org.apache.poi.xssf.usermodel.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import org.nyu.edu.dlts.utils.*;

// Method to return a Java date object
Date getDate(String dateString) {
	DateFormat df = new SimpleDateFormat("MM/dd/yyyy");
	return df.parse(dateString);
}


// Method to get the cell data by providing a column number
String getCellDataByNumber(int column) {
	cell = record.getCell(column);
	
	if(cell != null) {
		return cell.toString();
	} else {
		return "";
	}	
}

// Method to get the data in a certain column 
String getCellData(char column) {
	getCellDataByNumber(MapperUtil.getColumnNumber(column));	
}

// Method to convert an accession record
void convertAccession() {
	recordJS.put("title", getCellData('H'));
	
	date = getDate(getCellData('M'));
	recordJS.put("accession_date", date);
	
	// get the ids
	recordJS.put("id_0", getCellData('B'));
	recordJS.put("id_1", getCellData('C'));
	recordJS.put("id_2", getCellData('D'));
	
	// add the extent data if needed
	if(!getCellData('E').isEmpty() && !getCellData('F').isEmpty()) {
		extentType = getCellData('E');
		extent = getCellData('F');
		
		extentJA = new JSONArray();
		MapperUtil.addExtent(extentJA, "whole", extent, extentType);
		recordJS.put("extents", extentJA);
	}
	
	// add the linked name if needed
	if(!getCellData('J').isEmpty() && !getCellData('K').isEmpty()) {
		role = getCellData('L');
		nameType = getCellData('J');
		name = getCellData('K');
		source = getCellData('I');
		MapperUtil.addName(recordJS, role, nameType, name, source);
	} else {
		
	}
	
	// add the description and general note
	recordJS.put("content_description", getCellData('H'));
	recordJS.put("general_note", getCellData('N'));
}

/*
 * This is where code execution starts by first checking that the record 
 * is not null. then it checks the type of record.
 * All functions being called must be above this point.
 */
if(record != null) {	
    if(recordType.equals("accession")) {
    		print("\nConverting Accession ...\n");
    		convertAccession();
    } else {
    		// print error message to say that the record type is not supported
    		print("Record not supported ... " + recordType);
    }
}
